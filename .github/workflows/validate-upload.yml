name: Validate and upload

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  validate-servers:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        name: Checkout from GitHub

      - name: Setup Python 3.x
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt

      - name: Validate Server JSON
        run: python scripts/validate_json.py --servers_dir servers --metadata_schema metadata.schema.json --inactive_file inactive.json --inactive_schema inactive.schema.json

      - name: Validate Server Media
        run: python scripts/validate_media.py --servers_dir servers

  upload-servers:
    needs: validate-servers
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    env:
      cdn_bucket: lunarclient-cdn-servermappings
      cdn_distribution: E45B8N9YLM3QG

    steps:
      - name: Checkout from GitHub
        uses: actions/checkout@master
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ARTIFACTS_ROLE_ARN }}
          aws-region: us-east-2

      - name: Setup Python 3.x
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install -r scripts/requirements.txt

      - name: Create output folder
        run: mkdir .out/
          
      - name: Output Server Media
        run: python scripts/convert_media.py --servers_dir servers --servers_logos_output .out/logos --servers_logos_sizes 256 128 64 32 --servers_backgrounds_output .out/backgrounds --servers_backgrounds_sizes 1280x720 852x480

      - name: Create Index File
        run: python scripts/create_index.py --servers_dir servers --index_output .out/servers.json

      - name: Upload to S3
        run: |
          aws s3 sync .out s3://$cdn_bucket --content-type "image/webp" --delete --cache-control "public, max-age=86400"
          aws s3 cp .out/servers.json s3://$cdn_bucket/servers.json --content-type "application/json" --cache-control "public, max-age=86400"

      - name: Purge cache
        run: aws cloudfront create-invalidation --distribution-id $cdn_distribution --paths "/*"
